Grammar imp:host.


Theorem lookup__unique : forall L N Ret Ret',
  imp:host:lookup(N, L) = Ret -> lookup(N, L) = Ret' -> Ret = Ret'.
induction on 1. intros. case H1.
  %found here 1
   case H2.
     %found here 2
      apply silver:core:head_unique to H4 H6. search.
     %found later 2
      assert false. backchain H6. apply head_unique to H3 H5. search.
      case H9.
  %found later 1
   case H2.
     %found here 2
      assert false. backchain H4. apply head_unique to H3 H7. search.
      case H9.
     %found later 2
      apply tail_unique to H5 H9. apply IH to H6 H10. search.


Extensible_Theorem value_unique_A : forall (T1 T2 : imp:host:A) Env V,
   T1 ~ T2 ->
   T1.imp:host:env = Env -> T2.env = Env ->
   T1.value = V ->
   T2.value = V
on T1.
 %plus
  intros IH1 IH2 Structure Eq T1Env T2Env T1Val.
  case_structure T2 in Eq with Structure. AEnv: case A.env.
  A1Env: case A1.env. A2Env: case A2.env. A3Env: case A3.env.
  Eq1: apply symmetry to H7. Eq2: apply symmetry to H8. clear H7 H8.
  case T1.value. apply IH1 to Eq1 AEnv A2Env H13.
  apply IH2 to Eq2 A1Env A3Env H14. case T2.value.
  apply plus_integer_unique to H15 H21. search.
 %num
  intros Structure N_Is Eq T1Env T2Env T1Val.
  case_structure T2 in Eq with Structure. case T1.value.
  case T2.value. search.
 %name
  intros Structure N_Is Eq T1Env T2Env T1Val.
  case_structure T2 in Eq with Structure. case T1.value.
  case T2.value.
    %lookup doesn't return
     assert exists Ret, lookup(L, Env2) = Ret. apply H12 to H13.
    %lookup returns
     apply imp:host:lookup__unique to H9 H12. search.


Extensible_Theorem value_unique_B : forall (T1 T2 : B) Env V,
   T1 ~ T2 ->
   T1.env = Env -> T2.env = Env ->
   T1.value = V ->
   T2.value = V
on T1.
 %greater
  intros Structure Eq T1Env T2Env T1Val.
  case_structure T2 in Eq with Structure. AEnv: case A.env.
  A1Env: case A1.env. A2Env: case A2.env. A3Env: case A3.env.
  Eq1: apply symmetry to H7. Eq2: apply symmetry to H8. clear H7 H8.
  case T1.value. apply value_unique_A to Eq1 AEnv A2Env H13.
  apply imp:host:value_unique_A to Eq2 A1Env A3Env H14. case T2.value.
  apply greater_integer_unique to H15 H21. search.
 %equal
  intros Structure Eq T1Env T2Env T1Val.
  case_structure T2 in Eq with Structure. AEnv: case A.env.
  A1Env: case A1.env. A2Env: case A2.env. A3Env: case A3.env.
  Eq1: apply symmetry to H7. Eq2: apply symmetry to H8. clear H7 H8.
  case T1.value.
    %equal
     apply value_unique_A to Eq1 AEnv A2Env H13.
     apply value_unique_A to Eq2 A1Env A3Env H14. case T2.value.
       %second one equal
        search.
       %second one not equal
        F: assert false. backchain H20. case F.
    %not equal
     apply value_unique_A to Eq1 AEnv A2Env H13.
     apply value_unique_A to Eq2 A1Env A3Env H14. case T2.value.
       %second one equal
        F: assert false. backchain H15. case F.
       %second one equal
        search.
 %and
  intros IH1 IH2 Structure Eq T1Env T2Env T1Val.
  case_structure T2 in Eq with Structure. BEnv: case B.env.
  B1Env: case B1.env. B2Env: case B2.env. B3Env: case B3.env.
  Eq1: apply symmetry to H7. Eq2: apply symmetry to H8. clear H7 H8.
  case T1.value.
    %B.value = true, T1.value = B1.value
     apply IH1 to Eq1 BEnv B2Env H13. apply IH2 to Eq2 B1Env B3Env H14.
     case T2.value. search.
    %B.value = false
     apply IH1 to Eq1 BEnv B2Env H13. case T2.value. search.
 %or
  intros IH1 IH2 Structure Eq T1Env T2Env T1Val.
  case_structure T2 in Eq with Structure. BEnv: case B.env.
  B1Env: case B1.env. B2Env: case B2.env. B3Env: case B3.env.
  Eq1: apply symmetry to H7. Eq2: apply symmetry to H8. clear H7 H8.
  case T1.value.
    %B.value = false, T1.value = B1.value
     apply IH1 to Eq1 BEnv B2Env H13. apply IH2 to Eq2 B1Env B3Env H14.
     case T2.value. search.
    %B.value = true
     apply IH1 to Eq1 BEnv B2Env H13. case T2.value. search.
 %bTrue
  intros Structure Eq T1Env T2Env T1Val.
  case_structure T2 in Eq with Structure.
  case T1.value. case T2.value. search.
 %bFalse
  intros Structure Eq T1Env T2Env T1Val.
  case_structure T2 in Eq with Structure.
  case T1.value. case T2.value. search.


Extensible_Theorem no_env__no_env_out : forall (T : C),
  T.env = <no value> -> T.env_out = <no value>
on T.
 %noop
  intros Structure TEnv. case T.env_out. search.
 %seq
  intros IH1 IH2 Structure TEnv. C1Env: case C1.env.
    %C.env_out does not exist
     apply IH2 to C1Env. case T.env_out. search.
    %C.env_out exists
     CEnv: case C.env. apply IH1 to CEnv.
 %assign
  intros Structure L_Is TEnv. case T.env_out.
    %A.value does not exist
     search.
    %T.env does not exist
     search.
 %ifThenElse
  intros IH1 IH2 Structure TEnv. CEnv: case C.env. apply IH1 to CEnv.
  C1Env: case C1.env. apply IH2 to C1Env. case T.env_out.
    %B.value does not exist
     search.
    %B.value = true, C.env_out does not exist
     search.
    %B.value = false, C1.env_out does not exist
     search.
 %while
  intros IH IH_SubWhile Structure TEnv. CEnv: case C.env.
  apply IH to CEnv. case T.env_out.
    %B.value = true, SubWhile.env_out does not exist
     search.
    %B.value = true, subWhile does not exist
     search.
    %B.value = false
     search.
    %B.value does not exist
     search.
    %B.value = true, SubWhile.env_out has a value
     case_local T.subWhile. case SubWhile.env.
     apply IH_SubWhile to H8 H15.


Extensible_Theorem env_out__unique__C : forall (T1 T2 : C) Env V,
   T1 ~ T2 ->
   T1.env = Env -> T2.env = Env ->
   T1.env_out = V ->
   T2.env_out = V
on T1.
 %noop
  intros Structure Eq T1Env T2Env T1EnvOut.
  case_structure T2 in Eq with Structure. case T1.env_out.
  case T2.env_out. search.
 %seq
  intros IH1 IH2 Structure Eq T1Env T2Env T1EnvOut.
  case_structure T2 in Eq with Structure.
  Eq1: apply symmetry to H7. Eq2: apply symmetry to H8. clear H7 H8.
  CEnv: case C.env. C2Env: case C2.env. case C1.env.
    %C.env_out does not exist
     apply no_env__no_env_out to H12. case T1.env_out.
    %C.env_out does exist
     apply IH1 to Eq1 CEnv C2Env H13. case C3.env. case T1.env_out.
     apply IH2 to Eq2 H12 H15 H18. case T2.env_out. search.
 %assign
  intros Structure L_Is Eq T1Env T2Env T1EnvOut. case T1.env_out.
  case_structure T2 in Eq with Structure. apply symmetry to H9.
  case A.env. case A1.env. apply value_unique_A to H13 H14 H16 H6.
  case T2.env_out. search.
 %ifThenElse
  intros IH1 IH2 Structure Eq T1Env T2Env T1EnvOut.
  case_structure T2 in Eq with Structure. EqB: apply symmetry to H8.
  Eq1: apply symmetry to H9. Eq2: apply symmetry to H10.
  clear H8 H9 H10. BEnv: case B.env. B1Env: case B1.env.
  CEnv: case C.env. C1Env: case C1.env. C2Env: case C2.env.
  C3Env: case C3.env. case T1.env_out.
    %B.value = true
     apply value_unique_B to EqB BEnv B1Env H16.
     apply IH1 to Eq1 CEnv C2Env H17. case T2.env_out. search.
    %B.value = false
     apply value_unique_B to EqB BEnv B1Env H16.
     apply IH2 to Eq2 C1Env C3Env H17. case T2.env_out. search.
 %while
  intros IH IH_SubWhile Structure Eq T1Env T2Env T1EnvOut.
  case_structure T2 in Eq with Structure.
  EqB: apply symmetry to H7. EqC: apply symmetry to H8. clear H7 H8.
  BEnv: case B.env. B1Env: case B1.env. case T1.env_out.
    %B.value = true
     apply value_unique_B to EqB BEnv B1Env H13. CEnv: case C.env.
     C1Env: case C1.env. case SubWhile.env.
       %SubWhile.env = <no value>, C.env_out = <no value>
        apply no_env__no_env_out to H18.
       %SubWhile.env = Env_out1, C.env_out = Env_out1
        apply IH to EqC _ _ _.
        case_local T2.subWhile. case SubWhile2.env.
        case_local T1.subWhile.
        trees_equal H29 H22. apply IH_SubWhile to H14 H32 _ _ _.
        case T2.env_out. search.
    %B.value = false
     apply value_unique_B to EqB BEnv B1Env H13. case T2.env_out.
     search.


Theorem test_if_this_is_defined : true.
search.

