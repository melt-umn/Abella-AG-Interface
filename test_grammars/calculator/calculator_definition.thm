
Kind bool   type.
Kind nat   type.
Import "../../silver_compilation/encodingPrimitives/integer_addition".
Import "../../silver_compilation/encodingPrimitives/integer_multiplication".

Import "../../silver_compilation/encodingPrimitives/lists".
Import "../../silver_compilation/encodingPrimitives/strings".
Kind $pair   type -> type -> type.
Import "../../silver_compilation/encodingPrimitives/pairs".
Kind $attrVal   type -> type.
Import "../../silver_compilation/encodingPrimitives/attr_val".


Kind nt_Expr   type.
Kind nt_Root   type.

Type $prod_intConst   integer -> nt_Expr.
Type $prod_plus   nt_Expr -> nt_Expr -> nt_Expr.
Type $prod_minus   nt_Expr -> nt_Expr -> nt_Expr.
Type $prod_mult   nt_Expr -> nt_Expr -> nt_Expr.
Type $prod_letBind   (list $char) -> nt_Expr -> nt_Expr -> nt_Expr.
Type $prod_name   (list $char) -> nt_Expr.
Type $prod_root   nt_Expr -> nt_Root.


Kind node_Expr   type.
Kind node_Root   type.


Kind $node_tree   type.

Type $ntr_nt_Expr   node_Expr -> list $node_tree -> $node_tree.
Type $ntr_nt_Root   node_Root -> list $node_tree -> $node_tree.


Type $access_$_env_$_nt_Expr   nt_Expr -> node_Expr -> $attrVal (list ($pair (list $char) integer)) -> prop.
Type $access_$_value_$_nt_Expr   nt_Expr -> node_Expr -> $attrVal integer -> prop.
Type $access_$_value_$_nt_Root   nt_Root -> node_Root -> $attrVal integer -> prop.
Type $access_$_knownNames_$_nt_Expr   nt_Expr -> node_Expr -> $attrVal (list (list $char)) -> prop.
Type $access_$_valExists_$_nt_Expr   nt_Expr -> node_Expr -> $attrVal bool -> prop.
Type $access_$_valExists_$_nt_Root   nt_Root -> node_Root -> $attrVal bool -> prop.



Type $env$_is_inherited   prop.
Type $knownNames$_is_inherited   prop.


Type $structure_eq__nt_Expr   nt_Expr -> nt_Expr -> prop.
Type $structure_eq__nt_Root   nt_Root -> nt_Root -> prop.

Define $structure_eq__nt_Expr__host : nt_Expr -> nt_Expr -> prop by
  $structure_eq__nt_Expr__host ($prod_intConst N) ($prod_intConst N);
  $structure_eq__nt_Expr__host ($prod_plus E2 E) ($prod_plus E3 E1) :=
     $structure_eq__nt_Expr E2 E3 /\
     $structure_eq__nt_Expr E E1;
  $structure_eq__nt_Expr__host ($prod_minus E2 E) ($prod_minus E3 E1) :=
     $structure_eq__nt_Expr E2 E3 /\
     $structure_eq__nt_Expr E E1;
  $structure_eq__nt_Expr__host ($prod_mult E2 E) ($prod_mult E3 E1) :=
     $structure_eq__nt_Expr E2 E3 /\
     $structure_eq__nt_Expr E E1;
  $structure_eq__nt_Expr__host ($prod_letBind L E2 E) ($prod_letBind L E3 E1) :=
     $structure_eq__nt_Expr E2 E3 /\
     $structure_eq__nt_Expr E E1;
  $structure_eq__nt_Expr__host ($prod_name L) ($prod_name L).
Define $structure_eq__nt_Root__host : nt_Root -> nt_Root -> prop by
  $structure_eq__nt_Root__host ($prod_root E) ($prod_root E1) :=
     $structure_eq__nt_Expr E E1.


Type $env__nt_Expr   nt_Expr -> nt_Expr -> $node_tree -> prop.
Type $value__nt_Expr   nt_Expr -> nt_Expr -> $node_tree -> prop.
Type $value__nt_Root   nt_Root -> nt_Root -> $node_tree -> prop.
Type $knownNames__nt_Expr   nt_Expr -> nt_Expr -> $node_tree -> prop.
Type $valExists__nt_Expr   nt_Expr -> nt_Expr -> $node_tree -> prop.
Type $valExists__nt_Root   nt_Root -> nt_Root -> $node_tree -> prop.
Type $env__nt_Root   nt_Root -> nt_Root -> $node_tree -> prop.
Type $knownNames__nt_Root   nt_Root -> nt_Root -> $node_tree -> prop.

Type $wpd_node_nt_Expr   nt_Expr -> $node_tree -> prop.
Type $wpd_nt_Expr   nt_Expr -> $node_tree -> prop.
Type $wpd_node_nt_Root   nt_Root -> $node_tree -> prop.
Type $wpd_nt_Root   nt_Root -> $node_tree -> prop.


Define $fun__lookup :
       list ($pair (list $char) integer) -> list $char ->
       integer -> prop by
  $fun__lookup (($pair_c N Val)::Tail) N Val;
  $fun__lookup (($pair_c Name Val)::Tail) N Result :=
     (Name = N -> false) /\
     $fun__lookup Tail N Result.

Define $fun__contains :
       list $char -> list (list $char) -> bool -> prop by
  $fun__contains N nil $bfalse;
  $fun__contains N (N::Rest) $btrue;
  $fun__contains N (Other::Rest) B :=
     (N = Other -> false) /\
     $fun__contains N Rest B.


Define $env__nt_Expr__host :
       nt_Expr -> nt_Expr -> $node_tree -> prop by
  %intConst
  $env__nt_Expr__host TreeName ($prod_intConst I)
                               ($ntr_nt_Expr Node nil);
  %plus
  $env__nt_Expr__host TreeName ($prod_plus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_env_$_nt_Expr TreeName Node $attr_no /\
     $access_$_env_$_nt_Expr E1 E1Node $attr_no /\
     $access_$_env_$_nt_Expr E2 E2Node $attr_no;
  $env__nt_Expr__host TreeName ($prod_plus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_env_$_nt_Expr TreeName Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E1 E1Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E2 E2Node ($attr_ex Val);
  %minus
  $env__nt_Expr__host TreeName ($prod_minus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_env_$_nt_Expr TreeName Node $attr_no /\
     $access_$_env_$_nt_Expr E1 E1Node $attr_no /\
     $access_$_env_$_nt_Expr E2 E2Node $attr_no;
  $env__nt_Expr__host TreeName ($prod_minus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_env_$_nt_Expr TreeName Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E1 E1Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E2 E2Node ($attr_ex Val);
  %mult
  $env__nt_Expr__host TreeName ($prod_mult E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_env_$_nt_Expr TreeName Node $attr_no /\
     $access_$_env_$_nt_Expr E1 E1Node $attr_no /\
     $access_$_env_$_nt_Expr E2 E2Node $attr_no;
  $env__nt_Expr__host TreeName ($prod_mult E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_env_$_nt_Expr TreeName Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E1 E1Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E2 E2Node ($attr_ex Val);
  %letBind
  $env__nt_Expr__host TreeName ($prod_letBind N E Body)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                  ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_env_$_nt_Expr TreeName Node $attr_no /\
     $access_$_env_$_nt_Expr E ENode $attr_no /\
     $access_$_env_$_nt_Expr Body BodyNode $attr_no;
  $env__nt_Expr__host TreeName ($prod_letBind N E Body)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                  ($ntr_nt_Expr BodyNode BL)::nil)) :=
     exists LTop,
        $access_$_env_$_nt_Expr TreeName Node ($attr_ex LTop) /\
        $access_$_env_$_nt_Expr E ENode ($attr_ex LTop) /\
        $access_$_value_$_nt_Expr E ENode $attr_no /\
        $access_$_env_$_nt_Expr Body BodyNode $attr_no;
  $env__nt_Expr__host TreeName ($prod_letBind N E Body)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                   ($ntr_nt_Expr BodyNode BL)::nil)) :=
     exists LTop EVal LSub,
        $access_$_env_$_nt_Expr TreeName Node ($attr_ex LTop) /\
        $access_$_env_$_nt_Expr E ENode ($attr_ex LTop) /\
        $access_$_value_$_nt_Expr E ENode ($attr_ex EVal) /\
        $append (($pair_c N EVal)::nil) LTop LSub /\
        $access_$_env_$_nt_Expr Body BodyNode ($attr_ex LSub);
  %name
  $env__nt_Expr__host TreeName ($prod_name N) ($ntr_nt_Expr Node nil).

Define $value__nt_Expr__host :
       nt_Expr -> nt_Expr -> $node_tree -> prop by
  %intConst
  $value__nt_Expr__host TreeName ($prod_intConst I)
                                 ($ntr_nt_Expr Node nil) :=
     $access_$_value_$_nt_Expr TreeName Node ($attr_ex I);
  %plus
  $value__nt_Expr__host TreeName ($prod_plus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                     ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_value_$_nt_Expr TreeName Node $attr_no /\
     $access_$_value_$_nt_Expr E1 E1Node $attr_no;
  $value__nt_Expr__host TreeName ($prod_plus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists N1,
        $access_$_value_$_nt_Expr TreeName Node $attr_no /\
        $access_$_value_$_nt_Expr E1 E1Node ($attr_ex N1) /\
        $access_$_value_$_nt_Expr E2 E2Node $attr_no;
  $value__nt_Expr__host TreeName ($prod_plus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists PlusResult E1Value E2Value,
        $access_$_value_$_nt_Expr TreeName Node
                                  ($attr_ex PlusResult) /\
        $access_$_value_$_nt_Expr E1 E1Node ($attr_ex E1Value) /\
        $access_$_value_$_nt_Expr E2 E2Node ($attr_ex E2Value) /\
        $plus_integer E1Value E2Value PlusResult;
  %minus
  $value__nt_Expr__host TreeName ($prod_minus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_value_$_nt_Expr TreeName Node $attr_no /\
     $access_$_value_$_nt_Expr E1 E1Node $attr_no;
  $value__nt_Expr__host TreeName ($prod_minus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists N1,
        $access_$_value_$_nt_Expr TreeName Node $attr_no /\
        $access_$_value_$_nt_Expr E1 E1Node ($attr_ex N1) /\
        $access_$_value_$_nt_Expr E2 E2Node $attr_no;
  $value__nt_Expr__host TreeName ($prod_minus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists MinusResult E1Value E2Value,
        $access_$_value_$_nt_Expr TreeName Node
                                  ($attr_ex MinusResult) /\
        $access_$_value_$_nt_Expr E1 E1Node ($attr_ex E1Value) /\
        $access_$_value_$_nt_Expr E2 E2Node ($attr_ex E2Value) /\
        $minus_integer E1Value E2Value MinusResult;
  %mult
  $value__nt_Expr__host TreeName ($prod_mult E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_value_$_nt_Expr TreeName Node $attr_no /\
     $access_$_value_$_nt_Expr E1 E1Node $attr_no;
  $value__nt_Expr__host TreeName ($prod_mult E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists N1,
        $access_$_value_$_nt_Expr TreeName Node $attr_no /\
        $access_$_value_$_nt_Expr E1 E1Node ($attr_ex N1) /\
        $access_$_value_$_nt_Expr E2 E2Node $attr_no;
  $value__nt_Expr__host TreeName ($prod_mult E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists MultResult E1Value E2Value,
        $access_$_value_$_nt_Expr TreeName Node
                                  ($attr_ex MultResult) /\
        $access_$_value_$_nt_Expr E1 E1Node ($attr_ex E1Value) /\
        $access_$_value_$_nt_Expr E2 E2Node ($attr_ex E2Value) /\
        $multiply_integer E1Value E2Value MultResult;
  %letBind
  $value__nt_Expr__host TreeName ($prod_letBind N E Body)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                  ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_value_$_nt_Expr TreeName Node $attr_no /\
     $access_$_value_$_nt_Expr Body BodyNode $attr_no;
  $value__nt_Expr__host TreeName ($prod_letBind N E Body)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                  ($ntr_nt_Expr BodyNode BL)::nil)) :=
     exists BodyValue,
        $access_$_value_$_nt_Expr TreeName Node
                                  ($attr_ex BodyValue) /\
        $access_$_value_$_nt_Expr Body BodyNode ($attr_ex BodyValue);
  %name
  $value__nt_Expr__host TreeName ($prod_name N)
                                 ($ntr_nt_Expr Node nil) :=
     $access_$_value_$_nt_Expr TreeName Node $attr_no /\
     $access_$_env_$_nt_Expr TreeName Node $attr_no;
  $value__nt_Expr__host TreeName ($prod_name N)
                                 ($ntr_nt_Expr Node nil) :=
     exists Env,
        $access_$_value_$_nt_Expr TreeName Node $attr_no /\
        $access_$_env_$_nt_Expr TreeName Node ($attr_ex Env) /\
        ((exists Ret, $fun__lookup Env N Ret) -> false);
  $value__nt_Expr__host TreeName ($prod_name N)
                                 ($ntr_nt_Expr Node nil) :=
     exists Env Ret,
        $access_$_value_$_nt_Expr TreeName Node ($attr_ex Ret) /\
        $access_$_env_$_nt_Expr TreeName Node ($attr_ex Env) /\
        $fun__lookup Env N Ret.

Define $knownNames__nt_Expr__host :
       nt_Expr -> nt_Expr -> $node_tree -> prop by
  %intConst
  $knownNames__nt_Expr__host TreeName ($prod_intConst I)
                                      ($ntr_nt_Expr Node nil);
  %plus
  $knownNames__nt_Expr__host TreeName ($prod_plus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_knownNames_$_nt_Expr TreeName Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E1 E1Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E2 E2Node $attr_no;
  $knownNames__nt_Expr__host TreeName ($prod_plus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_knownNames_$_nt_Expr TreeName Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E1 E1Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E2 E2Node ($attr_ex Val);
  %minus
  $knownNames__nt_Expr__host TreeName ($prod_minus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_knownNames_$_nt_Expr TreeName Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E1 E1Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E2 E2Node $attr_no;
  $knownNames__nt_Expr__host TreeName ($prod_minus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_knownNames_$_nt_Expr TreeName Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E1 E1Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E2 E2Node ($attr_ex Val);
  %mult
  $knownNames__nt_Expr__host TreeName ($prod_mult E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_knownNames_$_nt_Expr TreeName Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E1 E1Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E2 E2Node $attr_no;
  $knownNames__nt_Expr__host TreeName ($prod_mult E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_knownNames_$_nt_Expr TreeName Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E1 E1Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E2 E2Node ($attr_ex Val);
  %letBind
  $knownNames__nt_Expr__host TreeName ($prod_letBind N E Body)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                  ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_knownNames_$_nt_Expr TreeName Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E ENode $attr_no /\
     $access_$_knownNames_$_nt_Expr Body BodyNode $attr_no;
  $knownNames__nt_Expr__host TreeName ($prod_letBind N E Body)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                  ($ntr_nt_Expr BodyNode BL)::nil)) :=
     exists LTop LSub,
        $access_$_knownNames_$_nt_Expr TreeName Node
                                        ($attr_ex LTop) /\
        $access_$_knownNames_$_nt_Expr E ENode ($attr_ex LTop) /\
        $append (N::nil) LTop LSub /\
        $access_$_knownNames_$_nt_Expr Body BodyNode ($attr_ex LSub);
  %name
  $knownNames__nt_Expr__host TreeName ($prod_name N)
                             ($ntr_nt_Expr Node nil).

Define $valExists__nt_Expr__host :
       nt_Expr -> nt_Expr -> $node_tree -> prop by
  $valExists__nt_Expr__host TreeName ($prod_intConst I)
                            ($ntr_nt_Expr Node nil) :=
     $access_$_valExists_$_nt_Expr TreeName Node ($attr_ex $btrue);
  %plus
  $valExists__nt_Expr__host TreeName ($prod_plus E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1 E1Node $attr_no;
  $valExists__nt_Expr__host TreeName ($prod_plus E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1 E1Node ($attr_ex $btrue) /\
     $access_$_valExists_$_nt_Expr E2 E2Node $attr_no;
  $valExists__nt_Expr__host TreeName ($prod_plus E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_valExists_$_nt_Expr TreeName Node ($attr_ex Val) /\
        $access_$_valExists_$_nt_Expr E1 E1Node ($attr_ex $btrue) /\
        $access_$_valExists_$_nt_Expr E2 E2Node ($attr_ex Val);
  $valExists__nt_Expr__host TreeName ($prod_plus E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node ($attr_ex $bfalse) /\
     $access_$_valExists_$_nt_Expr E1 E1Node ($attr_ex $bfalse);
  %minus
  $valExists__nt_Expr__host TreeName ($prod_minus E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1 E1Node $attr_no;
  $valExists__nt_Expr__host TreeName ($prod_minus E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1 E1Node ($attr_ex $btrue) /\
     $access_$_valExists_$_nt_Expr E2 E2Node $attr_no;
  $valExists__nt_Expr__host TreeName ($prod_minus E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_valExists_$_nt_Expr TreeName Node ($attr_ex Val) /\
        $access_$_valExists_$_nt_Expr E1 E1Node ($attr_ex $btrue) /\
        $access_$_valExists_$_nt_Expr E2 E2Node ($attr_ex Val);
  $valExists__nt_Expr__host TreeName ($prod_minus E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node ($attr_ex $bfalse) /\
     $access_$_valExists_$_nt_Expr E1 E1Node ($attr_ex $bfalse);
  %mult
  $valExists__nt_Expr__host TreeName ($prod_mult E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1 E1Node $attr_no;
  $valExists__nt_Expr__host TreeName ($prod_mult E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1 E1Node ($attr_ex $btrue) /\
     $access_$_valExists_$_nt_Expr E2 E2Node $attr_no;
  $valExists__nt_Expr__host TreeName ($prod_mult E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_valExists_$_nt_Expr TreeName Node ($attr_ex Val) /\
        $access_$_valExists_$_nt_Expr E1 E1Node ($attr_ex $btrue) /\
        $access_$_valExists_$_nt_Expr E2 E2Node ($attr_ex Val);
  $valExists__nt_Expr__host TreeName ($prod_mult E1 E2)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node ($attr_ex $bfalse) /\
     $access_$_valExists_$_nt_Expr E1 E1Node ($attr_ex $bfalse);
  %letBind
  $valExists__nt_Expr__host TreeName ($prod_letBind N E Body)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                  ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node $attr_no /\
     $access_$_valExists_$_nt_Expr E ENode $attr_no;
  $valExists__nt_Expr__host TreeName ($prod_letBind N E Body)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                  ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node $attr_no /\
     $access_$_valExists_$_nt_Expr E ENode ($attr_ex $btrue) /\
     $access_$_valExists_$_nt_Expr Body BodyNode $attr_no;
  $valExists__nt_Expr__host TreeName ($prod_letBind N E Body)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                   ($ntr_nt_Expr BodyNode BL)::nil)) :=
     exists Val,
        $access_$_valExists_$_nt_Expr TreeName Node ($attr_ex Val) /\
        $access_$_valExists_$_nt_Expr E ENode ($attr_ex $btrue) /\
        $access_$_valExists_$_nt_Expr Body BodyNode ($attr_ex Val);
  $valExists__nt_Expr__host TreeName ($prod_letBind N E Body)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                  ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_valExists_$_nt_Expr TreeName Node ($attr_ex $bfalse) /\
     $access_$_valExists_$_nt_Expr E ENode ($attr_ex $bfalse);
  %name
  $valExists__nt_Expr__host TreeName ($prod_name N)
                                     ($ntr_nt_Expr Node nil) :=
     $access_$_valExists_$_nt_Expr TreeName Node $attr_no /\
     $access_$_knownNames_$_nt_Expr TreeName Node $attr_no;
  $valExists__nt_Expr__host TreeName ($prod_name N)
                                     ($ntr_nt_Expr Node nil) :=
     exists KnownNames,
       $access_$_valExists_$_nt_Expr TreeName Node $attr_no /\
       $access_$_knownNames_$_nt_Expr TreeName Node
                                      ($attr_ex KnownNames) /\
       ((exists Val, $fun__contains N KnownNames Val) -> false);
  $valExists__nt_Expr__host TreeName ($prod_name N)
                                     ($ntr_nt_Expr Node nil) :=
     exists KnownNames Val,
       $access_$_valExists_$_nt_Expr TreeName Node ($attr_ex Val) /\
       $access_$_knownNames_$_nt_Expr TreeName Node
                                      ($attr_ex KnownNames) /\
       $fun__contains N KnownNames Val.


Define $value__nt_Root__host :
       nt_Root -> nt_Root -> $node_tree -> prop by
  $value__nt_Root__host TreeName ($prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     $access_$_value_$_nt_Root TreeName Node $attr_no /\
     $access_$_value_$_nt_Expr E ENode $attr_no;
  $value__nt_Root__host TreeName ($prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     exists Val,
        $access_$_value_$_nt_Root TreeName Node ($attr_ex Val) /\
        $access_$_value_$_nt_Expr E ENode ($attr_ex Val).

Define $valExists__nt_Root__host :
       nt_Root -> nt_Root -> $node_tree -> prop by
  $valExists__nt_Root__host TreeName ($prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     $access_$_valExists_$_nt_Root TreeName Node $attr_no /\
     $access_$_valExists_$_nt_Expr E ENode $attr_no;
  $valExists__nt_Root__host TreeName ($prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     exists Val,
        $access_$_valExists_$_nt_Root TreeName Node ($attr_ex Val) /\
        $access_$_valExists_$_nt_Expr E ENode ($attr_ex Val).

Define $env__nt_Root__host :
       nt_Root -> nt_Root -> $node_tree -> prop by
  $env__nt_Root__host TreeName ($prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     $access_$_env_$_nt_Expr E ENode ($attr_ex nil).

Define $knownNames__nt_Root__host :
       nt_Root -> nt_Root -> $node_tree -> prop by
  $knownNames__nt_Root__host TreeName ($prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     $access_$_knownNames_$_nt_Expr E ENode ($attr_ex nil).


Define $split : (A -> B -> prop) -> ($pair A B) -> prop by
  $split SubRel ($pair_c A B) :=
     SubRel A B.

Define $wpd_node_nt_Expr__host : nt_Expr -> $node_tree -> prop by
   $wpd_node_nt_Expr__host Tree ($ntr_nt_Expr Node CL) :=
      exists Aenv Avalue AknownNames AvalExists,
         $env__nt_Expr Tree Tree ($ntr_nt_Expr Node CL) /\
            $access_$_env_$_nt_Expr Tree Node Aenv /\
            $is_attrVal (is_list (is_pair (is_string) (is_integer))) Aenv /\
         $value__nt_Expr Tree Tree ($ntr_nt_Expr Node CL) /\
            $access_$_value_$_nt_Expr Tree Node Avalue /\
            $is_attrVal (is_integer) Avalue /\
         $knownNames__nt_Expr Tree Tree ($ntr_nt_Expr Node CL) /\
            $access_$_knownNames_$_nt_Expr Tree Node AknownNames /\
            $is_attrVal (is_list (is_string)) AknownNames /\
         $valExists__nt_Expr Tree Tree ($ntr_nt_Expr Node CL) /\
            $access_$_valExists_$_nt_Expr Tree Node AvalExists /\
            $is_attrVal (is_bool) AvalExists.
Define $wpd_node_nt_Root__host : nt_Root -> $node_tree -> prop by
   $wpd_node_nt_Root__host Tree ($ntr_nt_Root Node CL) :=
      exists Avalue AvalExists,
         $value__nt_Root Tree Tree ($ntr_nt_Root Node CL) /\
            $access_$_value_$_nt_Root Tree Node Avalue /\
            $is_attrVal (is_integer) Avalue /\
         $valExists__nt_Root Tree Tree ($ntr_nt_Root Node CL) /\
            $access_$_valExists_$_nt_Root Tree Node AvalExists /\
            $is_attrVal (is_bool) AvalExists /\
         $env__nt_Root Tree Tree ($ntr_nt_Root Node CL) /\
         $knownNames__nt_Root Tree Tree ($ntr_nt_Root Node CL).

Define $wpd_nt_Expr__host : nt_Expr -> $node_tree -> prop by
  $wpd_nt_Expr__host ($prod_intConst N) ($ntr_nt_Expr Node (nil)) :=
     $wpd_node_nt_Expr ($prod_intConst N) ($ntr_nt_Expr Node (nil)) /\
     is_integer N;
  $wpd_nt_Expr__host ($prod_plus E1 E) ($ntr_nt_Expr Node (E1Ntr::ENtr::nil)) :=
     $wpd_node_nt_Expr ($prod_plus E1 E) ($ntr_nt_Expr Node (E1Ntr::ENtr::nil)) /\
     $wpd_nt_Expr E1 E1Ntr /\
     $wpd_nt_Expr E ENtr;
  $wpd_nt_Expr__host ($prod_minus E1 E) ($ntr_nt_Expr Node (E1Ntr::ENtr::nil)) :=
     $wpd_node_nt_Expr ($prod_minus E1 E) ($ntr_nt_Expr Node (E1Ntr::ENtr::nil)) /\
     $wpd_nt_Expr E1 E1Ntr /\
     $wpd_nt_Expr E ENtr;
  $wpd_nt_Expr__host ($prod_mult E1 E) ($ntr_nt_Expr Node (E1Ntr::ENtr::nil)) :=
     $wpd_node_nt_Expr ($prod_mult E1 E) ($ntr_nt_Expr Node (E1Ntr::ENtr::nil)) /\
     $wpd_nt_Expr E1 E1Ntr /\
     $wpd_nt_Expr E ENtr;
  $wpd_nt_Expr__host ($prod_letBind L E1 E) ($ntr_nt_Expr Node (E1Ntr::ENtr::nil)) :=
     $wpd_node_nt_Expr ($prod_letBind L E1 E) ($ntr_nt_Expr Node (E1Ntr::ENtr::nil)) /\
     is_string L /\
     $wpd_nt_Expr E1 E1Ntr /\
     $wpd_nt_Expr E ENtr;
  $wpd_nt_Expr__host ($prod_name L) ($ntr_nt_Expr Node (nil)) :=
     $wpd_node_nt_Expr ($prod_name L) ($ntr_nt_Expr Node (nil)) /\
     is_string L.
Define $wpd_nt_Root__host : nt_Root -> $node_tree -> prop by
  $wpd_nt_Root__host ($prod_root E) ($ntr_nt_Root Node (ENtr::nil)) :=
     $wpd_node_nt_Root ($prod_root E) ($ntr_nt_Root Node (ENtr::nil)) /\
     $wpd_nt_Expr E ENtr.


Theorem $access_$_env_$_nt_Expr__unique : forall Tree Node V V',
   $access_$_env_$_nt_Expr Tree Node V ->
   $access_$_env_$_nt_Expr Tree Node V' -> V = V'.
skip.
Theorem $access_$_value_$_nt_Expr__unique : forall Tree Node V V',
   $access_$_value_$_nt_Expr Tree Node V ->
   $access_$_value_$_nt_Expr Tree Node V' -> V = V'.
skip.
Theorem $access_$_value_$_nt_Root__unique : forall Tree Node V V',
   $access_$_value_$_nt_Root Tree Node V ->
   $access_$_value_$_nt_Root Tree Node V' -> V = V'.
skip.
Theorem $access_$_knownNames_$_nt_Expr__unique : forall Tree Node V V',
   $access_$_knownNames_$_nt_Expr Tree Node V ->
   $access_$_knownNames_$_nt_Expr Tree Node V' -> V = V'.
skip.
Theorem $access_$_valExists_$_nt_Expr__unique : forall Tree Node V V',
   $access_$_valExists_$_nt_Expr Tree Node V ->
   $access_$_valExists_$_nt_Expr Tree Node V' -> V = V'.
skip.
Theorem $access_$_valExists_$_nt_Root__unique : forall Tree Node V V',
   $access_$_valExists_$_nt_Root Tree Node V ->
   $access_$_valExists_$_nt_Root Tree Node V' -> V = V'.
skip.


Theorem $access_$_env_$_nt_Expr__is : forall Tree Node CL V,
   $wpd_nt_Expr Tree ($ntr_nt_Expr Node CL) ->
   $access_$_env_$_nt_Expr Tree Node ($attr_ex V) ->
   is_list (is_pair (is_string) (is_integer)) V.
skip.
Theorem $access_$_value_$_nt_Expr__is : forall Tree Node CL V,
   $wpd_nt_Expr Tree ($ntr_nt_Expr Node CL) ->
   $access_$_value_$_nt_Expr Tree Node ($attr_ex V) ->
   is_integer V.
skip.
Theorem $access_$_value_$_nt_Root__is : forall Tree Node CL V,
   $wpd_nt_Root Tree ($ntr_nt_Root Node CL) ->
   $access_$_value_$_nt_Root Tree Node ($attr_ex V) ->
   is_integer V.
skip.
Theorem $access_$_knownNames_$_nt_Expr__is : forall Tree Node CL V,
   $wpd_nt_Expr Tree ($ntr_nt_Expr Node CL) ->
   $access_$_knownNames_$_nt_Expr Tree Node ($attr_ex V) ->
   is_list (is_string) V.
skip.
Theorem $access_$_valExists_$_nt_Expr__is : forall Tree Node CL V,
   $wpd_nt_Expr Tree ($ntr_nt_Expr Node CL) ->
   $access_$_valExists_$_nt_Expr Tree Node ($attr_ex V) ->
   is_bool V.
skip.
Theorem $access_$_valExists_$_nt_Root__is : forall Tree Node CL V,
   $wpd_nt_Root Tree ($ntr_nt_Root Node CL) ->
   $access_$_valExists_$_nt_Root Tree Node ($attr_ex V) ->
   is_bool V.
skip.


Theorem $env__nt_Expr__$prod_intConst : forall N Node TreeName T,
   $structure_eq__nt_Expr T ($prod_intConst N) ->
   $env__nt_Expr TreeName T Node ->
   $env__nt_Expr__host TreeName ($prod_intConst N) Node.
skip.
Theorem $value__nt_Expr__$prod_intConst : forall N Node TreeName T,
   $structure_eq__nt_Expr T ($prod_intConst N) ->
   $value__nt_Expr TreeName T Node ->
   $value__nt_Expr__host TreeName ($prod_intConst N) Node.
skip.
Theorem $knownNames__nt_Expr__$prod_intConst : forall N Node TreeName T,
   $structure_eq__nt_Expr T ($prod_intConst N) ->
   $knownNames__nt_Expr TreeName T Node ->
   $knownNames__nt_Expr__host TreeName ($prod_intConst N) Node.
skip.
Theorem $valExists__nt_Expr__$prod_intConst : forall N Node TreeName T,
   $structure_eq__nt_Expr T ($prod_intConst N) ->
   $valExists__nt_Expr TreeName T Node ->
   $valExists__nt_Expr__host TreeName ($prod_intConst N) Node.
skip.
Theorem $env__nt_Expr__$prod_plus : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_plus E1 E) ->
   $env__nt_Expr TreeName T Node ->
   $env__nt_Expr__host TreeName ($prod_plus E1 E) Node.
skip.
Theorem $value__nt_Expr__$prod_plus : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_plus E1 E) ->
   $value__nt_Expr TreeName T Node ->
   $value__nt_Expr__host TreeName ($prod_plus E1 E) Node.
skip.
Theorem $knownNames__nt_Expr__$prod_plus : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_plus E1 E) ->
   $knownNames__nt_Expr TreeName T Node ->
   $knownNames__nt_Expr__host TreeName ($prod_plus E1 E) Node.
skip.
Theorem $valExists__nt_Expr__$prod_plus : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_plus E1 E) ->
   $valExists__nt_Expr TreeName T Node ->
   $valExists__nt_Expr__host TreeName ($prod_plus E1 E) Node.
skip.
Theorem $env__nt_Expr__$prod_minus : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_minus E1 E) ->
   $env__nt_Expr TreeName T Node ->
   $env__nt_Expr__host TreeName ($prod_minus E1 E) Node.
skip.
Theorem $value__nt_Expr__$prod_minus : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_minus E1 E) ->
   $value__nt_Expr TreeName T Node ->
   $value__nt_Expr__host TreeName ($prod_minus E1 E) Node.
skip.
Theorem $knownNames__nt_Expr__$prod_minus : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_minus E1 E) ->
   $knownNames__nt_Expr TreeName T Node ->
   $knownNames__nt_Expr__host TreeName ($prod_minus E1 E) Node.
skip.
Theorem $valExists__nt_Expr__$prod_minus : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_minus E1 E) ->
   $valExists__nt_Expr TreeName T Node ->
   $valExists__nt_Expr__host TreeName ($prod_minus E1 E) Node.
skip.
Theorem $env__nt_Expr__$prod_mult : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_mult E1 E) ->
   $env__nt_Expr TreeName T Node ->
   $env__nt_Expr__host TreeName ($prod_mult E1 E) Node.
skip.
Theorem $value__nt_Expr__$prod_mult : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_mult E1 E) ->
   $value__nt_Expr TreeName T Node ->
   $value__nt_Expr__host TreeName ($prod_mult E1 E) Node.
skip.
Theorem $knownNames__nt_Expr__$prod_mult : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_mult E1 E) ->
   $knownNames__nt_Expr TreeName T Node ->
   $knownNames__nt_Expr__host TreeName ($prod_mult E1 E) Node.
skip.
Theorem $valExists__nt_Expr__$prod_mult : forall E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_mult E1 E) ->
   $valExists__nt_Expr TreeName T Node ->
   $valExists__nt_Expr__host TreeName ($prod_mult E1 E) Node.
skip.
Theorem $env__nt_Expr__$prod_letBind : forall L E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_letBind L E1 E) ->
   $env__nt_Expr TreeName T Node ->
   $env__nt_Expr__host TreeName ($prod_letBind L E1 E) Node.
skip.
Theorem $value__nt_Expr__$prod_letBind : forall L E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_letBind L E1 E) ->
   $value__nt_Expr TreeName T Node ->
   $value__nt_Expr__host TreeName ($prod_letBind L E1 E) Node.
skip.
Theorem $knownNames__nt_Expr__$prod_letBind : forall L E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_letBind L E1 E) ->
   $knownNames__nt_Expr TreeName T Node ->
   $knownNames__nt_Expr__host TreeName ($prod_letBind L E1 E) Node.
skip.
Theorem $valExists__nt_Expr__$prod_letBind : forall L E1 E Node TreeName T,
   $structure_eq__nt_Expr T ($prod_letBind L E1 E) ->
   $valExists__nt_Expr TreeName T Node ->
   $valExists__nt_Expr__host TreeName ($prod_letBind L E1 E) Node.
skip.
Theorem $env__nt_Expr__$prod_name : forall L Node TreeName T,
   $structure_eq__nt_Expr T ($prod_name L) ->
   $env__nt_Expr TreeName T Node ->
   $env__nt_Expr__host TreeName ($prod_name L) Node.
skip.
Theorem $value__nt_Expr__$prod_name : forall L Node TreeName T,
   $structure_eq__nt_Expr T ($prod_name L) ->
   $value__nt_Expr TreeName T Node ->
   $value__nt_Expr__host TreeName ($prod_name L) Node.
skip.
Theorem $knownNames__nt_Expr__$prod_name : forall L Node TreeName T,
   $structure_eq__nt_Expr T ($prod_name L) ->
   $knownNames__nt_Expr TreeName T Node ->
   $knownNames__nt_Expr__host TreeName ($prod_name L) Node.
skip.
Theorem $valExists__nt_Expr__$prod_name : forall L Node TreeName T,
   $structure_eq__nt_Expr T ($prod_name L) ->
   $valExists__nt_Expr TreeName T Node ->
   $valExists__nt_Expr__host TreeName ($prod_name L) Node.
skip.
Theorem $value__nt_Root__$prod_root : forall E Node TreeName T,
   $structure_eq__nt_Root T ($prod_root E) ->
   $value__nt_Root TreeName T Node ->
   $value__nt_Root__host TreeName ($prod_root E) Node.
skip.
Theorem $valExists__nt_Root__$prod_root : forall E Node TreeName T,
   $structure_eq__nt_Root T ($prod_root E) ->
   $valExists__nt_Root TreeName T Node ->
   $valExists__nt_Root__host TreeName ($prod_root E) Node.
skip.
Theorem $env__nt_Root__$prod_root : forall E Node TreeName T,
   $structure_eq__nt_Root T ($prod_root E) ->
   $env__nt_Root TreeName T Node ->
   $env__nt_Root__host TreeName ($prod_root E) Node.
skip.
Theorem $knownNames__nt_Root__$prod_root : forall E Node TreeName T,
   $structure_eq__nt_Root T ($prod_root E) ->
   $knownNames__nt_Root TreeName T Node ->
   $knownNames__nt_Root__host TreeName ($prod_root E) Node.
skip.


Theorem $wpd_nt_Expr__$prod_intConst : forall T N NodeTree,
   $structure_eq__nt_Expr T ($prod_intConst N) ->
   $wpd_nt_Expr T NodeTree ->
   $wpd_nt_Expr__host ($prod_intConst N) NodeTree.
skip.
Theorem $wpd_nt_Expr__$prod_plus : forall T E1 E NodeTree,
   $structure_eq__nt_Expr T ($prod_plus E1 E) ->
   $wpd_nt_Expr T NodeTree ->
   $wpd_nt_Expr__host ($prod_plus E1 E) NodeTree.
skip.
Theorem $wpd_nt_Expr__$prod_minus : forall T E1 E NodeTree,
   $structure_eq__nt_Expr T ($prod_minus E1 E) ->
   $wpd_nt_Expr T NodeTree ->
   $wpd_nt_Expr__host ($prod_minus E1 E) NodeTree.
skip.
Theorem $wpd_nt_Expr__$prod_mult : forall T E1 E NodeTree,
   $structure_eq__nt_Expr T ($prod_mult E1 E) ->
   $wpd_nt_Expr T NodeTree ->
   $wpd_nt_Expr__host ($prod_mult E1 E) NodeTree.
skip.
Theorem $wpd_nt_Expr__$prod_letBind : forall T L E1 E NodeTree,
   $structure_eq__nt_Expr T ($prod_letBind L E1 E) ->
   $wpd_nt_Expr T NodeTree ->
   $wpd_nt_Expr__host ($prod_letBind L E1 E) NodeTree.
skip.
Theorem $wpd_nt_Expr__$prod_name : forall T L NodeTree,
   $structure_eq__nt_Expr T ($prod_name L) ->
   $wpd_nt_Expr T NodeTree ->
   $wpd_nt_Expr__host ($prod_name L) NodeTree.
skip.
Theorem $wpd_nt_Root__$prod_root : forall T E NodeTree,
   $structure_eq__nt_Root T ($prod_root E) ->
   $wpd_nt_Root T NodeTree ->
   $wpd_nt_Root__host ($prod_root E) NodeTree.
skip.


Theorem $wpd_nt_Expr__ntr_nt_Expr : forall Tree NodeTree,
   $wpd_nt_Expr Tree NodeTree ->
   exists Node ChildList, NodeTree = $ntr_nt_Expr Node ChildList.
skip.
Theorem $wpd_nt_Root__ntr_nt_Root : forall Tree NodeTree,
   $wpd_nt_Root Tree NodeTree ->
   exists Node ChildList, NodeTree = $ntr_nt_Root Node ChildList.
skip.


Theorem $wpd__to__env__nt_Expr : forall Tree NodeTree,
   $wpd_nt_Expr Tree NodeTree ->
   $env__nt_Expr Tree Tree NodeTree.
skip.
Theorem $wpd__to__value__nt_Expr : forall Tree NodeTree,
   $wpd_nt_Expr Tree NodeTree ->
   $value__nt_Expr Tree Tree NodeTree.
skip.
Theorem $wpd__to__value__nt_Root : forall Tree NodeTree,
   $wpd_nt_Root Tree NodeTree ->
   $value__nt_Root Tree Tree NodeTree.
skip.
Theorem $wpd__to__knownNames__nt_Expr : forall Tree NodeTree,
   $wpd_nt_Expr Tree NodeTree ->
   $knownNames__nt_Expr Tree Tree NodeTree.
skip.
Theorem $wpd__to__valExists__nt_Expr : forall Tree NodeTree,
   $wpd_nt_Expr Tree NodeTree ->
   $valExists__nt_Expr Tree Tree NodeTree.
skip.
Theorem $wpd__to__valExists__nt_Root : forall Tree NodeTree,
   $wpd_nt_Root Tree NodeTree ->
   $valExists__nt_Root Tree Tree NodeTree.
skip.
Theorem $wpd__to__env__nt_Root : forall Tree NodeTree,
   $wpd_nt_Root Tree NodeTree ->
   $env__nt_Root Tree Tree NodeTree.
skip.
Theorem $wpd__to__knownNames__nt_Root : forall Tree NodeTree,
   $wpd_nt_Root Tree NodeTree ->
   $knownNames__nt_Root Tree Tree NodeTree.
skip.


Theorem $structure_eq__nt_Expr__equal : forall T1 T2,
   $structure_eq__nt_Expr T1 T2 -> T1 = T2.
skip.
Theorem $structure_eq__nt_Expr__symm : forall T1 T2,
   $structure_eq__nt_Expr T1 T2 ->
   $structure_eq__nt_Expr T2 T1.
skip.
Theorem $structure_eq__nt_Expr__wpd : forall T NTr,
   $wpd_nt_Expr T NTr -> $structure_eq__nt_Expr T T.
skip.
Theorem $structure_eq__nt_Expr__host__expand : forall T1 T2,
   $structure_eq__nt_Expr__host T1 T2 ->
   $structure_eq__nt_Expr T1 T2.
skip.
Theorem $structure_eq__nt_Root__equal : forall T1 T2,
   $structure_eq__nt_Root T1 T2 -> T1 = T2.
skip.
Theorem $structure_eq__nt_Root__symm : forall T1 T2,
   $structure_eq__nt_Root T1 T2 ->
   $structure_eq__nt_Root T2 T1.
skip.
Theorem $structure_eq__nt_Root__wpd : forall T NTr,
   $wpd_nt_Root T NTr -> $structure_eq__nt_Root T T.
skip.
Theorem $structure_eq__nt_Root__host__expand : forall T1 T2,
   $structure_eq__nt_Root__host T1 T2 ->
   $structure_eq__nt_Root T1 T2.
skip.


Theorem $structure_eq__$prod_intConst : forall T N,
   $structure_eq__nt_Expr T ($prod_intConst N) -> 
   $structure_eq__nt_Expr__host T ($prod_intConst N).
skip.
Theorem $structure_eq__$prod_plus : forall T E1 E,
   $structure_eq__nt_Expr T ($prod_plus E1 E) -> 
   $structure_eq__nt_Expr__host T ($prod_plus E1 E).
skip.
Theorem $structure_eq__$prod_minus : forall T E1 E,
   $structure_eq__nt_Expr T ($prod_minus E1 E) -> 
   $structure_eq__nt_Expr__host T ($prod_minus E1 E).
skip.
Theorem $structure_eq__$prod_mult : forall T E1 E,
   $structure_eq__nt_Expr T ($prod_mult E1 E) -> 
   $structure_eq__nt_Expr__host T ($prod_mult E1 E).
skip.
Theorem $structure_eq__$prod_letBind : forall T L E1 E,
   $structure_eq__nt_Expr T ($prod_letBind L E1 E) -> 
   $structure_eq__nt_Expr__host T ($prod_letBind L E1 E).
skip.
Theorem $structure_eq__$prod_name : forall T L,
   $structure_eq__nt_Expr T ($prod_name L) -> 
   $structure_eq__nt_Expr__host T ($prod_name L).
skip.
Theorem $structure_eq__$prod_root : forall T E,
   $structure_eq__nt_Root T ($prod_root E) -> 
   $structure_eq__nt_Root__host T ($prod_root E).
skip.
