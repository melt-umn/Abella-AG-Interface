
Kind bool   type.
Kind nat   type.
Import "../../silver_compilation/encodingPrimitives/integer_addition".
Import "../../silver_compilation/encodingPrimitives/integer_multiplication".

Import "../../silver_compilation/encodingPrimitives/lists".
Import "../../silver_compilation/encodingPrimitives/strings".
Kind $pair   type -> type -> type.
Import "../../silver_compilation/encodingPrimitives/pairs".
Kind $attrVal   type -> type.
Import "../../silver_compilation/encodingPrimitives/attr_val".


Kind nt_Expr   type.

Type prod_intConst   integer -> nt_Expr.
Type prod_plus   nt_Expr -> nt_Expr -> nt_Expr.
Type prod_minus   nt_Expr -> nt_Expr -> nt_Expr.
Type prod_mult   nt_Expr -> nt_Expr -> nt_Expr.
Type prod_letBind   list $char -> nt_Expr -> nt_Expr -> nt_Expr.
Type prod_name   list $char -> nt_Expr.


Kind nt_Root   type.

Type prod_root   nt_Expr -> nt_Root.


Kind node_Expr   type.
Kind node_Root   type.


/*The $node_tree type could be defined in a library and imported.*/
Kind $node_tree   type.

Type $ntr_nt_Expr   node_Expr -> list $node_tree -> $node_tree.
Type $ntr_nt_Root   node_Root -> list $node_tree -> $node_tree.


Type $access_$_env_$_nt_Expr
     node_Expr -> $attrVal (list ($pair (list $char) integer)) -> prop.
Type $access_$_value_$_nt_Expr   node_Expr -> $attrVal integer -> prop.
Type $access_$_knownNames_$_nt_Expr
     node_Expr -> $attrVal (list (list $char)) -> prop.
Type $access_$_valExists_$_nt_Expr   node_Expr -> $attrVal bool -> prop.

Type $access_$_value_$_nt_Root   node_Root -> $attrVal integer -> prop.
Type $access_$_valExists_$_nt_Root   node_Root -> $attrVal bool -> prop.



Type $env__nt_Expr   nt_Expr -> $node_tree -> prop.
Type $value__nt_Expr   nt_Expr -> $node_tree -> prop.
Type $knownNames__nt_Expr   nt_Expr -> $node_tree -> prop.
Type $valExists__nt_Expr   nt_Expr -> $node_tree -> prop.



Define fun__lookup :
       list ($pair (list $char) integer) -> list $char ->
       integer -> prop by
  fun__lookup (($pair_c N Val)::Tail) N Val;
  fun__lookup (($pair_c Name Val)::Tail) N Result :=
     (Name = N -> false) /\
     fun__lookup Tail N Result.

Define fun__contains :
       list $char -> list (list $char) -> bool -> prop by
  fun__contains N nil $bfalse;
  fun__contains N (N::Rest) $btrue;
  fun__contains N (Other::Rest) B :=
     (N = Other -> false) /\
     fun__contains N Rest B.



Define $env__nt_Expr__host : nt_Expr -> $node_tree -> prop by
  %intConst
  $env__nt_Expr__host (prod_intConst I) ($ntr_nt_Expr Node nil);
  %plus
  $env__nt_Expr__host (prod_plus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_env_$_nt_Expr Node $attr_no /\
     $access_$_env_$_nt_Expr E1Node $attr_no /\
     $access_$_env_$_nt_Expr E2Node $attr_no;
  $env__nt_Expr__host (prod_plus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_env_$_nt_Expr Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E1Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E2Node ($attr_ex Val);
  %minus
  $env__nt_Expr__host (prod_minus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_env_$_nt_Expr Node $attr_no /\
     $access_$_env_$_nt_Expr E1Node $attr_no /\
     $access_$_env_$_nt_Expr E2Node $attr_no;
  $env__nt_Expr__host (prod_minus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_env_$_nt_Expr Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E1Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E2Node ($attr_ex Val);
  %mult
  $env__nt_Expr__host (prod_mult E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_env_$_nt_Expr Node $attr_no /\
     $access_$_env_$_nt_Expr E1Node $attr_no /\
     $access_$_env_$_nt_Expr E2Node $attr_no;
  $env__nt_Expr__host (prod_mult E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_env_$_nt_Expr Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E1Node ($attr_ex Val) /\
        $access_$_env_$_nt_Expr E2Node ($attr_ex Val);
  %letBind
  $env__nt_Expr__host (prod_letBind N E Body)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                   ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_env_$_nt_Expr Node $attr_no /\
     $access_$_env_$_nt_Expr ENode $attr_no /\
     $access_$_env_$_nt_Expr BodyNode $attr_no;
  $env__nt_Expr__host (prod_letBind N E Body)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                   ($ntr_nt_Expr BodyNode BL)::nil)) :=
     exists LTop,
        $access_$_env_$_nt_Expr Node ($attr_ex LTop) /\
        $access_$_env_$_nt_Expr ENode ($attr_ex LTop) /\
        $access_$_value_$_nt_Expr ENode $attr_no /\
        $access_$_env_$_nt_Expr BodyNode $attr_no;
  $env__nt_Expr__host (prod_letBind N E Body)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                   ($ntr_nt_Expr BodyNode BL)::nil)) :=
     exists LTop EVal LSub,
        $access_$_env_$_nt_Expr Node ($attr_ex LTop) /\
        $access_$_env_$_nt_Expr ENode ($attr_ex LTop) /\
        $access_$_value_$_nt_Expr ENode ($attr_ex EVal) /\
        $append (($pair_c N EVal)::nil) LTop LSub /\
        $access_$_env_$_nt_Expr BodyNode ($attr_ex LSub);
  %name
  $env__nt_Expr__host (prod_name N) ($ntr_nt_Expr Node nil).

Define $value__nt_Expr__host : nt_Expr -> $node_tree -> prop by
  %intConst
  $value__nt_Expr__host (prod_intConst I) ($ntr_nt_Expr Node nil) :=
     $access_$_value_$_nt_Expr Node ($attr_ex I);
  %plus
  $value__nt_Expr__host (prod_plus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                     ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_value_$_nt_Expr Node $attr_no /\
     $access_$_value_$_nt_Expr E1Node $attr_no;
  $value__nt_Expr__host (prod_plus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                     ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists N1,
        $access_$_value_$_nt_Expr Node $attr_no /\
        $access_$_value_$_nt_Expr E1Node ($attr_ex N1) /\
        $access_$_value_$_nt_Expr E2Node $attr_no;
  $value__nt_Expr__host (prod_plus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                     ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists PlusResult E1Value E2Value,
        $access_$_value_$_nt_Expr Node ($attr_ex PlusResult) /\
        $access_$_value_$_nt_Expr E1Node ($attr_ex E1Value) /\
        $access_$_value_$_nt_Expr E2Node ($attr_ex E2Value) /\
        $plus_integer E1Value E2Value PlusResult;
  %minus
  $value__nt_Expr__host (prod_minus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                     ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_value_$_nt_Expr Node $attr_no /\
     $access_$_value_$_nt_Expr E1Node $attr_no;
  $value__nt_Expr__host (prod_minus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                     ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists N1,
        $access_$_value_$_nt_Expr Node $attr_no /\
        $access_$_value_$_nt_Expr E1Node ($attr_ex N1) /\
        $access_$_value_$_nt_Expr E2Node $attr_no;
  $value__nt_Expr__host (prod_minus E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                     ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists MinusResult E1Value E2Value,
        $access_$_value_$_nt_Expr Node ($attr_ex MinusResult) /\
        $access_$_value_$_nt_Expr E1Node ($attr_ex E1Value) /\
        $access_$_value_$_nt_Expr E2Node ($attr_ex E2Value) /\
        $plus_integer E1Value E2Value MinusResult;
  %mult
  $value__nt_Expr__host (prod_mult E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                     ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_value_$_nt_Expr Node $attr_no /\
     $access_$_value_$_nt_Expr E1Node $attr_no;
  $value__nt_Expr__host (prod_mult E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                     ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists N1,
        $access_$_value_$_nt_Expr Node $attr_no /\
        $access_$_value_$_nt_Expr E1Node ($attr_ex N1) /\
        $access_$_value_$_nt_Expr E2Node $attr_no;
  $value__nt_Expr__host (prod_mult E1 E2)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                     ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists MultResult E1Value E2Value,
        $access_$_value_$_nt_Expr Node ($attr_ex MultResult) /\
        $access_$_value_$_nt_Expr E1Node ($attr_ex E1Value) /\
        $access_$_value_$_nt_Expr E2Node ($attr_ex E2Value) /\
        $plus_integer E1Value E2Value MultResult;
  %letBind
  $value__nt_Expr__host (prod_letBind N E Body)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                  ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_value_$_nt_Expr Node $attr_no /\
     $access_$_value_$_nt_Expr BodyNode $attr_no;
  $value__nt_Expr__host (prod_letBind N E Body)
                     ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                  ($ntr_nt_Expr BodyNode BL)::nil)) :=
     exists BodyValue,
        $access_$_value_$_nt_Expr Node ($attr_ex BodyValue) /\
        $access_$_value_$_nt_Expr BodyNode ($attr_ex BodyValue);
  %name
  $value__nt_Expr__host (prod_name N) ($ntr_nt_Expr Node nil) :=
     $access_$_value_$_nt_Expr Node $attr_no /\
     $access_$_env_$_nt_Expr Node $attr_no;
  $value__nt_Expr__host (prod_name N) ($ntr_nt_Expr Node nil) :=
     exists Env,
        $access_$_value_$_nt_Expr Node $attr_no /\
        $access_$_env_$_nt_Expr Node ($attr_ex Env) /\
        ((exists Ret, fun__lookup Env N Ret) -> false);
  $value__nt_Expr__host (prod_name N) ($ntr_nt_Expr Node nil) :=
     exists Env Ret,
        $access_$_value_$_nt_Expr Node ($attr_ex Ret) /\
        $access_$_env_$_nt_Expr Node ($attr_ex Env) /\
        fun__lookup Env N Ret.

Define $knownNames__nt_Expr__host : nt_Expr -> $node_tree -> prop by
  %intConst
  $knownNames__nt_Expr__host (prod_intConst I) ($ntr_nt_Expr Node nil);
  %plus
  $knownNames__nt_Expr__host (prod_plus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_knownNames_$_nt_Expr Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E1Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E2Node $attr_no;
  $knownNames__nt_Expr__host (prod_plus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_knownNames_$_nt_Expr Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E1Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E2Node ($attr_ex Val);
  %minus
  $knownNames__nt_Expr__host (prod_minus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_knownNames_$_nt_Expr Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E1Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E2Node $attr_no;
  $knownNames__nt_Expr__host (prod_minus E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_knownNames_$_nt_Expr Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E1Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E2Node ($attr_ex Val);
  %mult
  $knownNames__nt_Expr__host (prod_mult E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_knownNames_$_nt_Expr Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E1Node $attr_no /\
     $access_$_knownNames_$_nt_Expr E2Node $attr_no;
  $knownNames__nt_Expr__host (prod_mult E1 E2)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                   ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_knownNames_$_nt_Expr Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E1Node ($attr_ex Val) /\
        $access_$_knownNames_$_nt_Expr E2Node ($attr_ex Val);
  %letBind
  $knownNames__nt_Expr__host (prod_letBind N E Body)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                   ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_knownNames_$_nt_Expr Node $attr_no /\
     $access_$_knownNames_$_nt_Expr ENode $attr_no /\
     $access_$_knownNames_$_nt_Expr BodyNode $attr_no;
  $knownNames__nt_Expr__host (prod_letBind N E Body)
                   ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                   ($ntr_nt_Expr BodyNode BL)::nil)) :=
     exists LTop LSub,
        $access_$_knownNames_$_nt_Expr Node ($attr_ex LTop) /\
        $access_$_knownNames_$_nt_Expr ENode ($attr_ex LTop) /\
        $append (N::nil) LTop LSub /\
        $access_$_knownNames_$_nt_Expr BodyNode ($attr_ex LSub);
  %name
  $knownNames__nt_Expr__host (prod_name N) ($ntr_nt_Expr Node nil).

Define $valExists__nt_Expr__host : nt_Expr -> $node_tree -> prop by
  $valExists__nt_Expr__host (prod_intConst I) ($ntr_nt_Expr Node nil) :=
     $access_$_valExists_$_nt_Expr Node ($attr_ex $btrue);
  %plus
  $valExists__nt_Expr__host (prod_plus E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1Node $attr_no;
  $valExists__nt_Expr__host (prod_plus E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1Node ($attr_ex $btrue) /\
     $access_$_valExists_$_nt_Expr E2Node $attr_no;
  $valExists__nt_Expr__host (prod_plus E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_valExists_$_nt_Expr Node ($attr_ex Val) /\
        $access_$_valExists_$_nt_Expr E1Node ($attr_ex $btrue) /\
        $access_$_valExists_$_nt_Expr E2Node ($attr_ex Val);
  $valExists__nt_Expr__host (prod_plus E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr Node ($attr_ex $bfalse) /\
     $access_$_valExists_$_nt_Expr E1Node ($attr_ex $bfalse);
  %minus
  $valExists__nt_Expr__host (prod_minus E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1Node $attr_no;
  $valExists__nt_Expr__host (prod_minus E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1Node ($attr_ex $btrue) /\
     $access_$_valExists_$_nt_Expr E2Node $attr_no;
  $valExists__nt_Expr__host (prod_minus E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_valExists_$_nt_Expr Node ($attr_ex Val) /\
        $access_$_valExists_$_nt_Expr E1Node ($attr_ex $btrue) /\
        $access_$_valExists_$_nt_Expr E2Node ($attr_ex Val);
  $valExists__nt_Expr__host (prod_minus E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr Node ($attr_ex $bfalse) /\
     $access_$_valExists_$_nt_Expr E1Node ($attr_ex $bfalse);
  %mult
  $valExists__nt_Expr__host (prod_mult E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1Node $attr_no;
  $valExists__nt_Expr__host (prod_mult E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr Node $attr_no /\
     $access_$_valExists_$_nt_Expr E1Node ($attr_ex $btrue) /\
     $access_$_valExists_$_nt_Expr E2Node $attr_no;
  $valExists__nt_Expr__host (prod_mult E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     exists Val,
        $access_$_valExists_$_nt_Expr Node ($attr_ex Val) /\
        $access_$_valExists_$_nt_Expr E1Node ($attr_ex $btrue) /\
        $access_$_valExists_$_nt_Expr E2Node ($attr_ex Val);
  $valExists__nt_Expr__host (prod_mult E1 E2)
                         ($ntr_nt_Expr Node (($ntr_nt_Expr E1Node L1)::
                                    ($ntr_nt_Expr E2Node L2)::nil)) :=
     $access_$_valExists_$_nt_Expr Node ($attr_ex $bfalse) /\
     $access_$_valExists_$_nt_Expr E1Node ($attr_ex $bfalse);
  %letBind
  $valExists__nt_Expr__host (prod_letBind N E Body)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                   ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_valExists_$_nt_Expr Node $attr_no /\
     $access_$_valExists_$_nt_Expr ENode $attr_no;
  $valExists__nt_Expr__host (prod_letBind N E Body)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                   ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_valExists_$_nt_Expr Node $attr_no /\
     $access_$_valExists_$_nt_Expr ENode ($attr_ex $btrue) /\
     $access_$_valExists_$_nt_Expr BodyNode $attr_no;
  $valExists__nt_Expr__host (prod_letBind N E Body)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                   ($ntr_nt_Expr BodyNode BL)::nil)) :=
     exists Val,
        $access_$_valExists_$_nt_Expr Node ($attr_ex Val) /\
        $access_$_valExists_$_nt_Expr ENode ($attr_ex $btrue) /\
        $access_$_valExists_$_nt_Expr BodyNode ($attr_ex Val);
  $valExists__nt_Expr__host (prod_letBind N E Body)
                        ($ntr_nt_Expr Node (($ntr_nt_Expr ENode EL)::
                                   ($ntr_nt_Expr BodyNode BL)::nil)) :=
     $access_$_valExists_$_nt_Expr Node ($attr_ex $bfalse) /\
     $access_$_valExists_$_nt_Expr ENode ($attr_ex $bfalse);
  %name
  $valExists__nt_Expr__host (prod_name N) ($ntr_nt_Expr Node nil) :=
     $access_$_valExists_$_nt_Expr Node $attr_no /\
     $access_$_knownNames_$_nt_Expr Node $attr_no;
  $valExists__nt_Expr__host (prod_name N) ($ntr_nt_Expr Node nil) :=
     exists KnownNames,
       $access_$_valExists_$_nt_Expr Node $attr_no /\
       $access_$_knownNames_$_nt_Expr Node ($attr_ex KnownNames) /\
       ((exists Val, fun__contains N KnownNames Val) -> false);
  $valExists__nt_Expr__host (prod_name N) ($ntr_nt_Expr Node nil) :=
     exists KnownNames Val,
       $access_$_valExists_$_nt_Expr Node ($attr_ex Val) /\
       $access_$_knownNames_$_nt_Expr Node ($attr_ex KnownNames) /\
       fun__contains N KnownNames Val.


Type $env__nt_Root   nt_Root -> $node_tree -> prop.
Type $value__nt_Root   nt_Root -> $node_tree -> prop.
Type $knownNames__nt_Root   nt_Root -> $node_tree -> prop.
Type $valExists__nt_Root   nt_Root -> $node_tree -> prop.

Define $value__nt_Root__host : nt_Root -> $node_tree -> prop by
  $value__nt_Root__host (prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     $access_$_value_$_nt_Root Node $attr_no /\
     $access_$_value_$_nt_Expr ENode $attr_no;
  $value__nt_Root__host (prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     exists Val,
        $access_$_value_$_nt_Root Node ($attr_ex Val) /\
        $access_$_value_$_nt_Expr ENode ($attr_ex Val).

Define $valExists__nt_Root__host : nt_Root -> $node_tree -> prop by
  $valExists__nt_Root__host (prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     $access_$_valExists_$_nt_Root Node $attr_no /\
     $access_$_valExists_$_nt_Expr ENode $attr_no;
  $valExists__nt_Root__host (prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     exists Val,
        $access_$_valExists_$_nt_Root Node ($attr_ex Val) /\
        $access_$_valExists_$_nt_Expr ENode ($attr_ex Val).

/*
  Even though we don't have env and knownNames on Root, we still need
  equation relations for them because we set them on the children.
*/
Define $env__nt_Root__host : nt_Root -> $node_tree -> prop by
  $env__nt_Root__host (prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     $access_$_env_$_nt_Expr ENode ($attr_ex nil).

Define $knownNames__nt_Root__host : nt_Root -> $node_tree -> prop by
  $knownNames__nt_Root__host (prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     $access_$_knownNames_$_nt_Expr ENode ($attr_ex nil).





Type $wpd_node_nt_Expr   nt_Expr -> $node_tree -> prop.

Define $wpd_node_nt_Expr__host : nt_Expr -> $node_tree -> prop by
  $wpd_node_nt_Expr__host Tree ($ntr_nt_Expr Node CL) :=
     forall AEnv AValue AKnownNames AValExists,
        $env__nt_Expr Tree ($ntr_nt_Expr Node CL) /\
           $access_$_env_$_nt_Expr Node AEnv /\
           $is_attrVal (is_list (is_pair is_string is_integer)) AEnv /\
        $value__nt_Expr Tree ($ntr_nt_Expr Node CL) /\
           $access_$_value_$_nt_Expr Node AValue /\
           $is_attrVal is_integer AValue /\
        $knownNames__nt_Expr Tree ($ntr_nt_Expr Node CL) /\
           $access_$_knownNames_$_nt_Expr Node AKnownNames /\
           $is_attrVal (is_list is_string) AKnownNames /\
        $valExists__nt_Expr Tree ($ntr_nt_Expr Node CL) /\
           $access_$_valExists_$_nt_Expr Node AValExists /\
           $is_attrVal is_bool AValExists.

Type $wpd_nt_Expr   nt_Expr -> $node_tree -> prop.

Define $wpd_nt_Expr__host : nt_Expr -> $node_tree -> prop by
  $wpd_nt_Expr__host (prod_intConst I) ($ntr_nt_Expr Node nil) :=
     $wpd_node_nt_Expr (prod_intConst I) ($ntr_nt_Expr Node nil) /\
     is_integer I;
  $wpd_nt_Expr__host (prod_plus E1 E2)
                 ($ntr_nt_Expr Node (E1Ntr::E2Ntr::nil)) :=
     $wpd_node_nt_Expr (prod_plus E1 E2)
                   ($ntr_nt_Expr Node (E1Ntr::E2Ntr::nil)) /\
     $wpd_nt_Expr E1 E1Ntr /\
     $wpd_nt_Expr E2 E2Ntr;
  $wpd_nt_Expr__host (prod_minus E1 E2)
                 ($ntr_nt_Expr Node (E1Ntr::E2Ntr::nil)) :=
     $wpd_node_nt_Expr (prod_minus E1 E2)
                   ($ntr_nt_Expr Node (E1Ntr::E2Ntr::nil)) /\
     $wpd_nt_Expr E1 E1Ntr /\
     $wpd_nt_Expr E2 E2Ntr;
  $wpd_nt_Expr__host (prod_mult E1 E2)
                 ($ntr_nt_Expr Node (E1Ntr::E2Ntr::nil)) :=
     $wpd_node_nt_Expr (prod_mult E1 E2)
                   ($ntr_nt_Expr Node (E1Ntr::E2Ntr::nil)) /\
     $wpd_nt_Expr E1 E1Ntr /\
     $wpd_nt_Expr E2 E2Ntr;
  $wpd_nt_Expr__host (prod_letBind N E Body)
                 ($ntr_nt_Expr Node (ENtr::BodyNtr::nil)) :=
     $wpd_node_nt_Expr (prod_letBind N E Body)
                   ($ntr_nt_Expr Node (ENtr::BodyNtr::nil)) /\
     is_string N /\
     $wpd_nt_Expr E ENtr /\
     $wpd_nt_Expr Body BodyNtr;
  $wpd_nt_Expr__host (prod_name N) ($ntr_nt_Expr Node nil) :=
     $wpd_node_nt_Expr (prod_name N) ($ntr_nt_Expr Node nil) /\
     is_string N.



Type $wpd_node_nt_Root   nt_Root -> $node_tree -> prop.

Define $wpd_node_nt_Root__host : nt_Root -> $node_tree -> prop by
  $wpd_node_nt_Root__host Tree ($ntr_nt_Root Node CL) :=
     forall AValue AValExists,
        $value__nt_Root Tree ($ntr_nt_Root Node CL) /\
            $access_$_value_$_nt_Root Node AValue /\
            $is_attrVal is_integer AValue /\
        $valExists__nt_Root Tree ($ntr_nt_Root Node CL) /\
            $access_$_valExists_$_nt_Root Node AValExists /\
            $is_attrVal is_bool AValExists /\
        $env__nt_Root Tree ($ntr_nt_Root Node CL) /\
        $knownNames__nt_Root Tree ($ntr_nt_Root Node CL).

Type $wpd_nt_Root   nt_Root -> $node_tree -> prop.

Define $wpd_nt_Root__host : nt_Root -> $node_tree -> prop by
  $wpd_nt_Root__host (prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) :=
     $wpd_node_nt_Root (prod_root E)
                 ($ntr_nt_Root Node (($ntr_nt_Expr ENode EL)::nil)) /\
     $wpd_nt_Expr E ($ntr_nt_Expr ENode EL).




/*
  I was going to put these axioms in another file.  However, it turns
  out Abella has strong opinions on declared relations (constants with
  a result type of prop)---once you try to import them.  Therefore I
  can't import this file, and need to define the axioms in this same
  file.

  Note that these axioms are needed for working in the component, but
  in the composition, they become provable theorems.
*/


%Access Uniqueness Axioms
Theorem $access_$_env_$_nt_Expr__unique : forall Node V V',
  $access_$_env_$_nt_Expr Node V ->
  $access_$_env_$_nt_Expr Node V' -> V = V'.
skip.
Theorem $access_$_value_$_nt_Expr__unique : forall Node V V',
  $access_$_value_$_nt_Expr Node V ->
  $access_$_value_$_nt_Expr Node V' -> V = V'.
skip.
Theorem $access_$_knownNames_$_nt_Expr__unique : forall Node V V',
  $access_$_knownNames_$_nt_Expr Node V ->
  $access_$_knownNames_$_nt_Expr Node V' -> V = V'.
skip.
Theorem $access_$_valExists_$_nt_Expr__unique : forall Node V V',
  $access_$_valExists_$_nt_Expr Node V ->
  $access_$_valExists_$_nt_Expr Node V' -> V = V'.
skip.

Theorem $access_$_value_$_nt_Root__unique : forall Node V V',
  $access_$_value_$_nt_Root Node V ->
  $access_$_value_$_nt_Root Node V' -> V = V'.
skip.
Theorem $access_$_valExists_$_nt_Root__unique : forall Node V V',
  $access_$_valExists_$_nt_Root Node V ->
  $access_$_valExists_$_nt_Root Node V' -> V = V'.
skip.


%Access Is Axioms
Theorem $access_$_env_$_nt_Expr__is : forall Tree Node ChildList V,
  $wpd_nt_Expr Tree ($ntr_nt_Expr Node ChildList) ->
  $access_$_env_$_nt_Expr Node ($attr_ex V) ->
  is_list (is_pair is_string is_integer) V.
skip.
Theorem $access_$_value_$_nt_Expr__is : forall Tree Node ChildList V,
  $wpd_nt_Expr Tree ($ntr_nt_Expr Node ChildList) ->
  $access_$_value_$_nt_Expr Node ($attr_ex V) ->
  is_integer V.
skip.
Theorem $access_$_knownNames_$_nt_Expr__is : forall Tree Node ChildList V,
  $wpd_nt_Expr Tree ($ntr_nt_Expr Node ChildList) ->
  $access_$_knownNames_$_nt_Expr Node ($attr_ex V) ->
  is_list is_string V.
skip.
Theorem $access_$_valExists_$_nt_Expr__is : forall Tree Node ChildList V,
  $wpd_nt_Expr Tree ($ntr_nt_Expr Node ChildList) ->
  $access_$_valExists_$_nt_Expr Node ($attr_ex V) ->
  is_bool V.
skip.

Theorem $access_$_value_$_nt_Root__is : forall Tree Node ChildList V,
  $wpd_nt_Root Tree ($ntr_nt_Root Node ChildList) ->
  $access_$_value_$_nt_Root Node ($attr_ex V) ->
  is_integer V.
skip.
Theorem $access_$_valExists_$_nt_Root__is : forall Tree Node ChildList V,
  $wpd_nt_Root Tree ($ntr_nt_Root Node ChildList) ->
  $access_$_valExists_$_nt_Root Node ($attr_ex V) ->
  is_bool V.
skip.


%Definition Expansion Theorems
Theorem $env__nt_Expr__host___to___env__nt_Expr :
  forall Tree Node,
     $env__nt_Expr__host Tree Node ->
     $env__nt_Expr Tree Node.
skip.
Theorem $value__nt_Expr__host___to___value__nt_Expr :
  forall Tree Node,
     $value__nt_Expr__host Tree Node ->
     $value__nt_Expr Tree Node.
skip.
Theorem $knownNames__nt_Expr__host___to___knownNames__nt_Expr :
  forall Tree Node,
     $knownNames__nt_Expr__host Tree Node ->
     $knownNames__nt_Expr Tree Node.
skip.
Theorem $valExists__nt_Expr__host___to___valExists__nt_Expr :
  forall Tree Node,
     $valExists__nt_Expr__host Tree Node ->
     $valExists__nt_Expr Tree Node.
skip.

Theorem $env__nt_Root__host___to___env__nt_Root :
  forall Tree Node,
     $env__nt_Root__host Tree Node ->
     $env__nt_Root Tree Node.
skip.
Theorem $value__nt_Root__host___to___value__nt_Root :
  forall Tree Node,
     $value__nt_Root__host Tree Node ->
     $value__nt_Root Tree Node.
skip.
Theorem $knownNames__nt_Root__host___to___knownNames__nt_Root :
  forall Tree Node,
     $knownNames__nt_Root__host Tree Node ->
     $knownNames__nt_Root Tree Node.
skip.
Theorem $valExists__nt_Root__host___to___valExists__nt_Root :
  forall Tree Node,
     $valExists__nt_Root__host Tree Node ->
     $valExists__nt_Root Tree Node.
skip.


%Primary Component Theorems
Theorem $env__nt_Expr__prod_intConst :
  forall I Node,
     $env__nt_Expr (prod_intConst I) Node ->
     $env__nt_Expr__host (prod_intConst I) Node.
skip.
Theorem $env__nt_Expr__prod_plus :
  forall E1 E2 Node,
     $env__nt_Expr (prod_plus E1 E2) Node ->
     $env__nt_Expr__host (prod_plus E1 E2) Node.
skip.
Theorem $env__nt_Expr__prod_minus :
  forall E1 E2 Node,
     $env__nt_Expr (prod_minus E1 E2) Node ->
     $env__nt_Expr__host (prod_minus E1 E2) Node.
skip.
Theorem $env__nt_Expr__prod_mult :
  forall E1 E2 Node,
     $env__nt_Expr (prod_mult E1 E2) Node ->
     $env__nt_Expr__host (prod_mult E1 E2) Node.
skip.
Theorem $env__nt_Expr__prod_letBind :
  forall N E Body Node,
     $env__nt_Expr (prod_letBind N E Body) Node ->
     $env__nt_Expr__host (prod_letBind N E Body) Node.
skip.
Theorem $env__nt_Expr__prod_name :
  forall N Node,
     $env__nt_Expr (prod_name N) Node ->
     $env__nt_Expr__host (prod_name N) Node.
skip.

Theorem $value__nt_Expr__prod_intConst :
  forall I Node,
     $value__nt_Expr (prod_intConst I) Node ->
     $value__nt_Expr__host (prod_intConst I) Node.
skip.
Theorem $value__nt_Expr__prod_plus :
  forall E1 E2 Node,
     $value__nt_Expr (prod_plus E1 E2) Node ->
     $value__nt_Expr__host (prod_plus E1 E2) Node.
skip.
Theorem $value__nt_Expr__prod_minus :
  forall E1 E2 Node,
     $value__nt_Expr (prod_minus E1 E2) Node ->
     $value__nt_Expr__host (prod_minus E1 E2) Node.
skip.
Theorem $value__nt_Expr__prod_mult :
  forall E1 E2 Node,
     $value__nt_Expr (prod_mult E1 E2) Node ->
     $value__nt_Expr__host (prod_mult E1 E2) Node.
skip.
Theorem $value__nt_Expr__prod_letBind :
  forall N E Body Node,
     $value__nt_Expr (prod_letBind N E Body) Node ->
     $value__nt_Expr__host (prod_letBind N E Body) Node.
skip.
Theorem $value__nt_Expr__prod_name :
  forall N Node,
     $value__nt_Expr (prod_name N) Node ->
     $value__nt_Expr__host (prod_name N) Node.
skip.

Theorem $knownNames__nt_Expr__prod_intConst :
  forall I Node,
     $knownNames__nt_Expr (prod_intConst I) Node ->
     $knownNames__nt_Expr__host (prod_intConst I) Node.
skip.
Theorem $knownNames__nt_Expr__prod_plus :
  forall E1 E2 Node,
     $knownNames__nt_Expr (prod_plus E1 E2) Node ->
     $knownNames__nt_Expr__host (prod_plus E1 E2) Node.
skip.
Theorem $knownNames__nt_Expr__prod_minus :
  forall E1 E2 Node,
     $knownNames__nt_Expr (prod_minus E1 E2) Node ->
     $knownNames__nt_Expr__host (prod_minus E1 E2) Node.
skip.
Theorem $knownNames__nt_Expr__prod_mult :
  forall E1 E2 Node,
     $knownNames__nt_Expr (prod_mult E1 E2) Node ->
     $knownNames__nt_Expr__host (prod_mult E1 E2) Node.
skip.
Theorem $knownNames__nt_Expr__prod_letBind :
  forall N E Body Node,
     $knownNames__nt_Expr (prod_letBind N E Body) Node ->
     $knownNames__nt_Expr__host (prod_letBind N E Body) Node.
skip.
Theorem $knownNames__nt_Expr__prod_name :
  forall N Node,
     $knownNames__nt_Expr (prod_name N) Node ->
     $knownNames__nt_Expr__host (prod_name N) Node.
skip.

Theorem $valExists__nt_Expr__prod_intConst :
  forall I Node,
     $valExists__nt_Expr (prod_intConst I) Node ->
     $valExists__nt_Expr__host (prod_intConst I) Node.
skip.
Theorem $valExists__nt_Expr__prod_plus :
  forall E1 E2 Node,
     $valExists__nt_Expr (prod_plus E1 E2) Node ->
     $valExists__nt_Expr__host (prod_plus E1 E2) Node.
skip.
Theorem $valExists__nt_Expr__prod_minus :
  forall E1 E2 Node,
     $valExists__nt_Expr (prod_minus E1 E2) Node ->
     $valExists__nt_Expr__host (prod_minus E1 E2) Node.
skip.
Theorem $valExists__nt_Expr__prod_mult :
  forall E1 E2 Node,
     $valExists__nt_Expr (prod_mult E1 E2) Node ->
     $valExists__nt_Expr__host (prod_mult E1 E2) Node.
skip.
Theorem $valExists__nt_Expr__prod_letBind :
  forall N E Body Node,
     $valExists__nt_Expr (prod_letBind N E Body) Node ->
     $valExists__nt_Expr__host (prod_letBind N E Body) Node.
skip.
Theorem $valExists__nt_Expr__prod_name :
  forall N Node,
     $valExists__nt_Expr (prod_name N) Node ->
     $valExists__nt_Expr__host (prod_name N) Node.
skip.

Theorem $env__nt_Root__prod_root :
  forall E Node,
     $env__nt_Root (prod_root E) Node ->
     $env__nt_Root__host (prod_root E) Node.
skip.

Theorem $value__nt_Root__prod_root :
  forall E Node,
     $value__nt_Root (prod_root E) Node ->
     $value__nt_Root__host (prod_root E) Node.
skip.

Theorem $knownNames__nt_Root__prod_root :
  forall E Node,
     $knownNames__nt_Root (prod_root E) Node ->
     $knownNames__nt_Root__host (prod_root E) Node.
skip.

Theorem $valExists__nt_Root__prod_root :
  forall E Node,
     $valExists__nt_Root (prod_root E) Node ->
     $valExists__nt_Root__host (prod_root E) Node.
skip.


%WPD Theorems
Theorem $wpd_node_nt_Expr__wpd_node_nt_Expr__host :
  forall E NodeTree,
    $wpd_node_nt_Expr E NodeTree ->
    $wpd_node_nt_Expr__host E NodeTree.
skip.
Theorem $wpd_node_nt_Root__wpd_node_nt_Root__host :
  forall R NodeTree,
    $wpd_node_nt_Root R NodeTree ->
    $wpd_node_nt_Root__host R NodeTree.
skip.

Theorem $wpd_node_nt_Expr__prod_intConst :
  forall N NodeTree,
    $wpd_nt_Expr (prod_intConst N) NodeTree ->
    $wpd_nt_Expr__host (prod_intConst N) NodeTree.
skip.
Theorem $wpd_node_nt_Expr__prod_plus :
  forall E1 E2 NodeTree,
    $wpd_nt_Expr (prod_plus E1 E2) NodeTree ->
    $wpd_nt_Expr__host (prod_plus E1 E2) NodeTree.
skip.
Theorem $wpd_node_nt_Expr__prod_minus :
  forall E1 E2 NodeTree,
    $wpd_nt_Expr (prod_minus E1 E2) NodeTree ->
    $wpd_nt_Expr__host (prod_minus E1 E2) NodeTree.
skip.
Theorem $wpd_node_nt_Expr__prod_mult :
  forall E1 E2 NodeTree,
    $wpd_nt_Expr (prod_mult E1 E2) NodeTree ->
    $wpd_nt_Expr__host (prod_mult E1 E2) NodeTree.
skip.
Theorem $wpd_node_nt_Expr__prod_letBind :
  forall N E Body NodeTree,
    $wpd_nt_Expr (prod_letBind N E Body) NodeTree ->
    $wpd_nt_Expr__host (prod_letBind N E Body) NodeTree.
skip.
Theorem $wpd_node_nt_Expr__prod_name :
  forall N NodeTree,
    $wpd_nt_Expr (prod_name N) NodeTree ->
    $wpd_nt_Expr__host (prod_name N) NodeTree.
skip.
Theorem $wpd_node_nt_Root__prod_root :
  forall E NodeTree,
    $wpd_nt_Root (prod_root E) NodeTree ->
    $wpd_nt_Root__host (prod_root E) NodeTree.
skip.


%WPD Node to Attribute Equations
Theorem $wpd_node__to__env__nt_Expr : forall Tree NodeTree,
  $wpd_node_nt_Expr Tree NodeTree ->
  $env__nt_Expr Tree NodeTree.
skip.
Theorem $wpd_node__to__value__nt_Expr : forall Tree NodeTree,
  $wpd_node_nt_Expr Tree NodeTree ->
  $value__nt_Expr Tree NodeTree.
skip.
Theorem $wpd_node__to__knownNames__nt_Expr : forall Tree NodeTree,
  $wpd_node_nt_Expr Tree NodeTree ->
  $knownNames__nt_Expr Tree NodeTree.
skip.
Theorem $wpd_node__to__valExists__nt_Expr : forall Tree NodeTree,
  $wpd_node_nt_Expr Tree NodeTree ->
  $valExists__nt_Expr Tree NodeTree.
skip.

Theorem $wpd_node__to__env__nt_Root : forall Tree NodeTree,
  $wpd_node_nt_Root Tree NodeTree ->
  $env__nt_Root Tree NodeTree.
skip.
Theorem $wpd_node__to__value__nt_Root : forall Tree NodeTree,
  $wpd_node_nt_Root Tree NodeTree ->
  $value__nt_Root Tree NodeTree.
skip.
Theorem $wpd_node__to__knownNames__nt_Root : forall Tree NodeTree,
  $wpd_node_nt_Root Tree NodeTree ->
  $knownNames__nt_Root Tree NodeTree.
skip.
Theorem $wpd_node__to__valExists__nt_Root : forall Tree NodeTree,
  $wpd_node_nt_Root Tree NodeTree ->
  $valExists__nt_Root Tree NodeTree.
skip.
