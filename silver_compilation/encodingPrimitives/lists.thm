Kind nat   type.
Import "integers".
Import "integer_addition".

/*
  Lists are one of the few things actually built into Abella, so we
  don't need to define them.  However, we will want to have some
  relations over them and properties of these relations.
*/

Define is_list : (A -> prop) -> list A -> prop by
  is_list IsA nil;
  is_list IsA (H::T) := IsA H /\ is_list IsA T.


Define $append : list A -> list A -> list A -> prop by
  $append nil L L;
  $append (H::T) L2 (H::L3) := $append T L2 L3.


Theorem append_nil_right[A] : forall (L L' : list A),
  $append L nil L' -> L = L'.
induction on 1. intros. case H1.
  %Subgoal 1
   search.
  %Subgoal 2
   apply IH to H2. search.

Theorem append_nil_left[A] : forall (L L' : list A),
  $append nil L L' -> L = L'.
intros. case H1. search.

Theorem append_unique[A] : forall (L1 L2 L3 L3' : list A),
  $append L1 L2 L3 -> $append L1 L2 L3' -> L3 = L3'.
induction on 1. intros. case H1.
  %Subgoal 1
   case H2. search.
  %Subgoal 2
   case H2. apply IH to H3 H4. search.


Define $fun__head : list A -> A -> prop by
  $fun__head (H::T) H.

Define $fun__tail : list A -> list A -> prop by
  $fun__tail (H::T) T.

Define $fun__length : list A -> integer -> prop by
  $fun__length nil ($posInt $zero);
  $fun__length (H::T) Length :=
     exists TailLength,
        $fun__length T TailLength /\
        $plus_integer ($posInt ($succ $zero)) TailLength Length.

Define $fun__null : list A -> bool -> prop by
  $fun__null nil $btrue;
  $fun__null (H::T) $bfalse.


Theorem head_unique[A] : forall L (H1 H2 : A),
   $fun__head L H1 -> $fun__head L H2 -> H1 = H2.
intros. case H1. case H2. search.

Theorem tail_unique[A] : forall (L T1 T2 : list A),
   $fun__tail L T1 -> $fun__tail L T2 -> T1 = T2.
intros. case H1. case H2. search.

Theorem length_unique[A] : forall (L : list A) Len1 Len2,
   $fun__length L Len1 -> $fun__length L Len2 -> Len1 = Len2.
induction on 1. intros. case H1.
  %Subgoal 1:  null
   case H2. search.
  %Subgoal 2:  non-null
   case H2. apply IH to H3 H5. apply plus_integer_unique to H4 H6.
   search.

Theorem null_unique[A] : forall (L : list A) B1 B2,
   $fun__null L B1 -> $fun__null L B2 -> B1 = B2.
intros. case H1.
  %Subgoal 1:  null
   case H2. search.
  %Subgoal 2:  non-null
   case H2. search.

